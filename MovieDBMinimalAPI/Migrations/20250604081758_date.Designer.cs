// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieDBMinimalAPI.Data;

#nullable disable

namespace MovieDBMinimalAPI.Migrations
{
    [DbContext(typeof(DbApplicationContext))]
    [Migration("20250604081758_date")]
    partial class date
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieDBMinimalAPI.Models.Movie", b =>
                {
                    b.Property<string>("imdbID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Actors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Awards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DVD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metascore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Production")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Released")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Runtime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Writer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imdbRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imdbVotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("imdbID");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            imdbID = "tt0111161",
                            Actors = "Tim Robbins, Morgan Freeman",
                            Awards = "Nominated for 7 Oscars. Another 21 wins & 36 nominations.",
                            BoxOffice = "$28,341,469",
                            Country = "USA",
                            DVD = "27 Jan 1998",
                            Director = "Frank Darabont",
                            Genre = "Drama",
                            Language = "English",
                            Metascore = "80",
                            Plot = "Two imprisoned men bond over a number of years...",
                            Poster = "https://example.com/poster1.jpg",
                            Production = "Castle Rock Entertainment",
                            Rated = "R",
                            Released = "14 Oct 1994",
                            Response = "True",
                            Runtime = "142 min",
                            Title = "The Shawshank Redemption",
                            Type = "movie",
                            Website = "N/A",
                            Writer = "Stephen King, Frank Darabont",
                            Year = "1994",
                            imdbRating = "9.3",
                            imdbVotes = "2,500,000"
                        },
                        new
                        {
                            imdbID = "tt0068646",
                            Actors = "Marlon Brando, Al Pacino",
                            Awards = "Won 3 Oscars. Another 26 wins & 30 nominations.",
                            BoxOffice = "$134,966,411",
                            Country = "USA",
                            DVD = "09 Oct 2001",
                            Director = "Francis Ford Coppola",
                            Genre = "Crime, Drama",
                            Language = "English, Italian",
                            Metascore = "100",
                            Plot = "The aging patriarch of an organized crime dynasty...",
                            Poster = "https://example.com/poster2.jpg",
                            Production = "Paramount Pictures",
                            Rated = "R",
                            Released = "24 Mar 1972",
                            Response = "True",
                            Runtime = "175 min",
                            Title = "The Godfather",
                            Type = "movie",
                            Website = "N/A",
                            Writer = "Mario Puzo, Francis Ford Coppola",
                            Year = "1972",
                            imdbRating = "9.2",
                            imdbVotes = "1,800,000"
                        });
                });

            modelBuilder.Entity("MovieDBMinimalAPI.Models.RatedMovie", b =>
                {
                    b.Property<string>("RatingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MovieId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("RatedAt")
                        .HasColumnType("date");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RatingId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("RatedMovies");
                });

            modelBuilder.Entity("MovieDBMinimalAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("DateRegisteredAt")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieDBMinimalAPI.Models.WatchlistMovie", b =>
                {
                    b.Property<string>("WatchlistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("AddeddAt")
                        .HasColumnType("date");

                    b.Property<string>("MovieId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WatchlistId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("WatchlistMovies");
                });

            modelBuilder.Entity("MovieDBMinimalAPI.Models.RatedMovie", b =>
                {
                    b.HasOne("MovieDBMinimalAPI.Models.Movie", "movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDBMinimalAPI.Models.User", "User")
                        .WithMany("RatedMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("MovieDBMinimalAPI.Models.WatchlistMovie", b =>
                {
                    b.HasOne("MovieDBMinimalAPI.Models.Movie", "movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDBMinimalAPI.Models.User", "User")
                        .WithMany("WatchlistMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("MovieDBMinimalAPI.Models.User", b =>
                {
                    b.Navigation("RatedMovies");

                    b.Navigation("WatchlistMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
